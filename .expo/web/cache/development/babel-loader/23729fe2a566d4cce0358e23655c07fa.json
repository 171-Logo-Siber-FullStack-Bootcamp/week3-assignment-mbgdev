{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function apim() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      data = _useState4[0],\n      setData = _useState4[1];\n\n  useEffect(function () {\n    Axios.get('https://reactnative.dev/movies.json').then(function (_ref) {\n      var data = _ref.data;\n      console.log(\"defaultApp -> data\", data.movies);\n      setData(data.movies);\n    }).catch(function (error) {\n      return console.error(error);\n    }).finally(function () {\n      return setLoading(false);\n    });\n  }, []);\n  return _jsx(View, {\n    style: {\n      flex: 1,\n      padding: 24\n    },\n    children: isLoading ? _jsx(ActivityIndicator, {}) : _jsx(FlatList, {\n      data: data,\n      keyExtractor: function keyExtractor(item, index) {\n        return index.toString();\n      },\n      renderItem: function renderItem(_ref2) {\n        var item = _ref2.item;\n        console.log(\"item\", item);\n        return _jsxs(Text, {\n          style: {\n            flex: 1,\n            backgroundColor: 'red'\n          },\n          children: [item.title, \", \", item.releaseYear]\n        });\n      }\n    })\n  });\n}\n;","map":{"version":3,"sources":["C:/Users/Burak/Desktop/odev/my-app/screens/apim.js"],"names":["React","useEffect","useState","apim","isLoading","setLoading","data","setData","Axios","get","then","console","log","movies","catch","error","finally","flex","padding","item","index","toString","backgroundColor","title","releaseYear"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;;;;;;AAIA,OAAO,SAASC,IAAT,GAAmB;AACtB,kBAAgCD,QAAQ,CAAC,IAAD,CAAxC;AAAA;AAAA,MAAOE,SAAP;AAAA,MAAkBC,UAAlB;;AACF,mBAAwBH,QAAQ,CAAC,EAAD,CAAhC;AAAA;AAAA,MAAOI,IAAP;AAAA,MAAaC,OAAb;;AAEAN,EAAAA,SAAS,CAAC,YAAM;AACdO,IAAAA,KAAK,CAACC,GAAN,CAAU,qCAAV,EACGC,IADH,CACQ,gBAAc;AAAA,UAAXJ,IAAW,QAAXA,IAAW;AAClBK,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCN,IAAI,CAACO,MAAvC;AACAN,MAAAA,OAAO,CAACD,IAAI,CAACO,MAAN,CAAP;AACD,KAJH,EAKGC,KALH,CAKS,UAACC,KAAD;AAAA,aAAWJ,OAAO,CAACI,KAAR,CAAcA,KAAd,CAAX;AAAA,KALT,EAMGC,OANH,CAMW;AAAA,aAAMX,UAAU,CAAC,KAAD,CAAhB;AAAA,KANX;AAOD,GARQ,EAQN,EARM,CAAT;AAUA,SACE,KAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEY,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,OAAO,EAAE;AAApB,KAAb;AAAA,cACGd,SAAS,GAAG,KAAC,iBAAD,KAAH,GACR,KAAC,QAAD;AACE,MAAA,IAAI,EAAEE,IADR;AAEE,MAAA,YAAY,EAAE,sBAACa,IAAD,EAAOC,KAAP,EAAiB;AAE7B,eAAOA,KAAK,CAACC,QAAN,EAAP;AACD,OALH;AAME,MAAA,UAAU,EAAE,2BAAc;AAAA,YAAXF,IAAW,SAAXA,IAAW;AACxBR,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBO,IAApB;AACA,eACE,MAAC,IAAD;AAAM,UAAA,KAAK,EAAE;AAAEF,YAAAA,IAAI,EAAE,CAAR;AAAWK,YAAAA,eAAe,EAAE;AAA5B,WAAb;AAAA,qBAAmDH,IAAI,CAACI,KAAxD,QAAiEJ,IAAI,CAACK,WAAtE;AAAA,UADF;AAGD;AAXH;AAFJ,IADF;AAmBD;AAAA","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { ActivityIndicator, FlatList, Modal, NativeModules, Text, View } from 'react-native';\r\n\r\n\r\nexport function apim  ()  {\r\n    const [isLoading, setLoading] = useState(true);\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    Axios.get('https://reactnative.dev/movies.json')\r\n      .then(({ data }) => {\r\n        console.log(\"defaultApp -> data\", data.movies)\r\n        setData(data.movies)\r\n      })\r\n      .catch((error) => console.error(error))\r\n      .finally(() => setLoading(false));\r\n  }, []);\r\n\r\n  return (\r\n    <View style={{ flex: 1, padding: 24 }}>\r\n      {isLoading ? <ActivityIndicator /> : (\r\n        <FlatList\r\n          data={data}\r\n          keyExtractor={(item, index) => {\r\n            // console.log(\"index\", index)\r\n            return index.toString();\r\n          }}\r\n          renderItem={({ item }) => {\r\n            console.log(\"item\", item)\r\n            return (\r\n              <Text style={{ flex: 1, backgroundColor: 'red' }}>{item.title}, {item.releaseYear}</Text>\r\n            )\r\n          }}\r\n        />\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}